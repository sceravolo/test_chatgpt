# app/mcp_handler.py

import os
import requests  # Needed for calling the weather API
from dotenv import load_dotenv
from app.db import execute_sql_query

from agents_mcp import Agent, RunnerContext
from agents import Runner, function_tool  # Import the function_tool decorator

load_dotenv()


@function_tool
def sql_executor(query: str) -> str:
    """
    Executes a SQL query on the PostgreSQL database and returns the result as a string.
    Use this tool when you need to query the database.
    Args:
        query: The SQL query string to execute.
    """
    print(f"Executing SQL Tool with query: {query}")
    try:
        result = execute_sql_query(query)
        response = str(result)
        print(f"SQL Result: {response}")
        return response
    except Exception as e:
        error_message = f"SQL Execution Error: {str(e)}"
        print(error_message)
        return error_message


@function_tool
def weather_api(location: str) -> str:
    """
    Calls a public weather API (wttr.in) to get current weather information for the given location.
    Use this tool when you need to retrieve weather data.
    Args:
        location: The location for which to get the current weather.
    """
    print(f"Calling Weather API for location: {location}")
    try:
        # wttr.in provides weather info in a simple format via HTTP GET
        url = f"http://wttr.in/{location}?format=3"
        response = requests.get(url)
        if response.status_code == 200:
            weather_info = response.text
            print(f"Weather API Response: {weather_info}")
            return weather_info
        else:
            error_message = f"Weather API error: {response.status_code}"
            print(error_message)
            return error_message
    except Exception as e:
        error_message = f"Weather API Execution Error: {str(e)}"
        print(error_message)
        return error_message


class MCPServerWrapper:
    def __init__(self, name, command, args):
        self.name = name
        self.command = command
        self.args = args

    def start(self):
        """
        Returns a configuration dictionary.
        """
        return {
            "name": self.name,
            "command": self.command,
            "args": self.args
        }

    async def list_tools(self):
        """
        Returns a list of available tools from this MCP server (stub).
        """
        print(f"MCP Server '{self.name}': listing tools (stub returns empty)")
        return []


async def handle_conversation(user_input: str) -> str:
    """
    Constructs and runs an MCP-enabled agent that uses both the SQL tool and the weather API tool,
    as well as external MCP servers, to answer the user's query.
    """
    instructions = (
        "You are an intelligent assistant that can use both SQL and external tools. "
        "When a query involves retrieving data from a SQL database, use the 'sql_executor' tool. "
        "When a query asks for weather information, use the 'weather_api' tool. "
        "You can also use external MCP tools (like 'fetch' or 'filesystem') when needed. "
        f"The user has asked: {user_input}"
    )

    # Define MCP servers as a list of MCPServerWrapper objects
    mcp_servers = [
        MCPServerWrapper(
            name="fetch",
            command="npx",
            args=["-y", "@modelcontextprotocol/server-fetch"]
        ),
        MCPServerWrapper(
            name="filesystem",
            command="npx",
            args=["-y", "@modelcontextprotocol/server-filesystem", "."]
        )
    ]

    # Create the agent including both tools:
    agent = Agent(
        name="MCP Agent",
        instructions=instructions,
        tools=[sql_executor, weather_api],  # Both tools are registered via the decorator
        mcp_servers=mcp_servers
    )

    context = RunnerContext()

    try:
        print(f"Running agent for user input: {user_input}")
        result = await Runner.run(agent, input=user_input, context=context)

        # Handle the response using common response attributes
        if hasattr(result, 'response') and hasattr(result.response, 'value'):
            final_response = result.response.value
        elif hasattr(result, 'output'):
            final_response = result.output
        elif hasattr(result, 'final_output'):
            final_response = result.final_output
        else:
            final_response = str(result)

        print(f"Agent finished. Response: {final_response}")
        return final_response

    except Exception as e:
        print(f"Error during agent run: {str(e)}")
        return f"‚ùå Error running agent: {str(e)}"


# Example call block (for standalone testing, uncomment if needed)
# if __name__ == "__main__":
#     import asyncio
#     async def main():
#         user_query = "What's the weather in Paris? And how many users are registered?"
#         response = await handle_conversation(user_query)
#         print("\n--- Final Response ---")
#         print(response)
#
#     asyncio.run(main())
